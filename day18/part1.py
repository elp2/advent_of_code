from copy import deepcopy

INPUT="""#################################################################################
#...#........e......#n........#z........#.......#.................#.........#...#
#.#.#Y#######.#####.#.#####.###.#######.#.#######.#############.#.#.#####.#.#.#.#
#.#.#.#.......#.....#.#...#.#...T.#.....#.............#...#.....#.#.#...#.#...#.#
#.###.#.#######.#####.#.###.#.#####.###Z#.###########.#.#.#.#####.###.#.#.#####.#
#.....#...#...#.......#.....#.#.#...#...#...#.....#...#.#...#.....#...#.#.#.....#
#.#######.#.#.#####.#########.#.#.###.#####C#S###.#####.#####.#####.###.#.#.###.#
#.#.X.#...#.#.......#...........#.#.#...#...#.#...#.....#...#.#.....#...#.#.#...#
#.#.#.#.#####.#######.###########.#.###.#.###.#.###.#####.#.#.#.#####.#####.#.###
#...#.#.#...#.....#...#....w#.A.#.#...#a#.#.#.#.#.......#.#...#...#...#...#.#.#.#
#####.#.#.#.#####.#F###.###.#.#.#.#.#.#.#.#.#.#.#######.###.#####.#.###.#.#.#.#.#
#.....#.#.#.#.....#...#...#.#.#...#.#...#..l#.#.......#...#.......#.#...#...#.#.#
#.#####.#.#.#####.###.###.#.#.#########.#####.#######.#.#.#########.#.#######.#.#
#.#...#...#.....#.#...#.W.#...#.......#.#.....#.....#.#.#.......#.....#.....#...#
#.###.#########.###.###.#####.#.#####.###.#########.#.#.#######.#.#####.###.###.#
#.......#.....#.....#.#.#.....#...G.#b..#...#...#...#.#...#...#.#.#...#...#.#...#
#######U#.###.#######.#.#######.#######.###.#.#Q#.###.#####.#.#.###.#.###.#.###.#
#.....#.#.#...#.......#.....#...#.B.....#.#...#.#...#.....#.#.#.....#.....#...#.#
#.#####.###.#.#.#####.#####.#.###.#######.#####.###.#####.#.#.#.#############.###
#.#.....#o..#...#.#.......#g..#..j#.....#.#.....#...#.....#.#.#...#.........#..k#
#.#.#####.#######.#.#####.#####.###.###.#.#.#####.#.#.#####.#.###.#.###.###.###.#
#.#.....#.#.#.....#.#.J.#.#.....#.....#.#.#.#.....#.#.......#.#.#.#...#...#.#.#.#
#.#####.#.#.#.###.#.###.###.#####.###.#.#.#.#.#####.###########.#.#######.#.#.#.#
#.....#...#.#...#.#...#.....#.....#.#.#.#.#.#...#...#...#.......#.#...#...#i#.#.#
#.###.#####.###.#.###.#######.#####.#.#.#.#.###.#.###.#.#.#####.#.#.#.#.###.#.#.#
#.#...#.....#...#.....#.....#.......#.#.#.#...#.#...#.#.......#.#.#.#..v#...#.#.#
#.#.###.#.#.#.#########.###.#####.###.#.#.###.#.###.#.#######.#.#.#.#####.###.#.#
#.#.#...#.#.#.#.......#.#.....#...#...#.#...#.#.#...#...#...#.#.....#...#.....#.#
#.###.###.###.#.#####.#.#.#####.###.###.#.###.#.#.#######.#.#########.#######.#.#
#.#...#...#...#.....#...#...#.....#.#...#h#...#.#.......#.#...#.....#...#.....#.#
#I#.###.###.#######.#######.#.#####.#.###.#.###.#######.#.###.#.###.###.#.#####.#
#.#...#.....#.....#.#...#...#.#.....#...#.#.....#.......#...#...#.#...#.#.#...#.#
#.###.#######.###.#.#.#.#.###.#.#######.#.#######.#########.#####.###.#.#.#.#.#.#
#...#.#.......#.#.#.#.#.#.....#.#...#...#...#...#.#.........#.......#.#...#.#...#
#.#.#.#######.#.#.###.#.#####.#.#.#.#.###.#.###.#.#####.#####.#####.#.#.###.###.#
#.#.#...#.....#.#.....#.#...#.#.#.#.#...#.#.#...#.#...#.#.....#...#.#.#...#.#.#.#
#.#####.#.#####.#######.#.#.###.###.###.#.#.#.#.#.#.#.#.#.#####.#.###.#####.#.#.#
#.......#.....#...#.....#.#.#...#.....#.#.#...#.#...#...#...H...#...#.......#...#
#.###########.#.###.#####.#.#.###.#####.#.###############.#########.#########.###
#.............#...........#...#...................................#...R........d#
#######################################.@.#######################################
#...#.......D.#.............#.......#.....#...................#...#.....#.......#
#.###.#####.###.#########.#.###.#.###.#.#.#.###########.#####.#.#.#.###.#.#####.#
#...#.#...#...........#.#.#...#.#.....#.#.#.......#...#.....#...#...#.....#...#.#
#K#.#.###.###########.#.#.###.#######.#.#.#.#####.#.#.#####.#.#######.#####.#.#.#
#.#.#.#.....#...#.....#.#.#...#.....#.#.#...#...#.#.#.......#.#...#.#.#...#.#...#
#.#.#.#.#####.#.###.###.#.###.#.###.###.#.###.#.###.#########.#.#.#.#.#.#.#.#####
#.#.....#.....#m..#.....#...#.#...#.....#.#...#.....#.......#.#.#.#...#.#.#.....#
#.#######.#######.###.#####.#.###.#####.###.#######.#######.#.#.#.#####.#.#####.#
#.#...#...#.......#...#...#.#.#...#...#.#...#.......#.....#...#.#.#.....#.#.#...#
#.###P#.###.###########.#.#.#.#.###.###.#.#########.#.###.#.###.#.#.#####.#.#.###
#.....#.#...#.....#.....#...#r..#...#...#...#.....#.#.#.#.#.#...#.#.#...#.#.#...#
#######.#.#####.#.#.#############.###.###.#.#.###.#.#.#.#.###.###.#.#.###.#.###.#
#.....#.#...#...#...#.....#.......#...#.#.#.#...#.#.#.#.#...#...#.#.#...#.#...#.#
#.###.#.###.#.#########.#.#.#.#####.###.#.#.#.###.#.#.#.###.###.#.#.###.#.###.#.#
#.#.#...#.#...#.........#.#.#.....#.....#.#...#...#.#.#...#...#.#.#...#.#...#.#.#
#.#.#####.#######.#########.#####.#####.#######.#.###.#.#####.#.#.###.#.###.#.#.#
#.#.....#.........#.....#...#...#.....#.#.......#.#...#.#...#.#.#...#.....#.#..p#
#.###.###.#####.###.###.#.###.#.#####.#.#.#######.#.###.#.#.#.#.###.###.###.#.###
#...#.#...#...#.......#.#...#.#.....#.#.#...#.....#.#.....#.#...#.....#.#...#...#
###.#.#.###.#.#########.###.#.#######.#.###.#######.#.#####.#####.#####.#.#####.#
#...#.#...#.#.#.......#...#.#.......#...#...#...#...#.#.#...#x..#.......#.#.....#
#.###.###.###.#.#######.#.#.#######.#####.###.#.#.###.#.#.#####.#.#####.#.#.#####
#.#.......#...#.#.......#.#.#.......#...#.....#...#.#.#.#.#...#.#.#...#.#.#.....#
#.#.#######.###.#.#######.#.#.#####.###.###########.#.#.#.#.#.#.###.#.###O#####.#
#.#.....#...#...#.#.......#...#...#...#.#...........#.#.#...#.#.....#..u..#...#.#
#.#####.#.#.#.#####.#####.#######.###.#.#.#########.#.#.#####.#############.###.#
#.#...#...#.#...#...#...#.........#...#.#...#...E.#.#...#.#.....#.......#.....M.#
#.#.#.#.#######.#.#####.###.#######.###.###.#.###.#.###.#.#.###.#.###.#.#.#######
#...#.#.#.....#.#.....#.....#.....#.#...#.#.#...#.#...#.#.#...#.#.#.#.#.#.#.....#
#.###.###.#.###.###.#.#####.#.###.#.###.#.#.#.#.#.#.###.#.###.#.#.#.#.###.#.###.#
#...#.#...#...#...#.#.....#.#...#.#.#...#.#.#.#.#.#...#.#...#q#.#...#...#.#.#...#
###.#.#.#####.###.#V#####.#.###.#.#.#.###.#.#.#.#.###.#.#.#.#.#.###.###.#.###.#.#
#...#.#.#...#.....#...#.#.#...#.#.#.#...#...#.#.#.#f#.#.#.#.#.#..s#.#.#.#.....#.#
#.###.#.#.#.#########.#.#.#####.#.#.#.#.#.#####.#.#.#.#.#.#.#.###.#.#.#.#######.#
#...#.#.#.#.....#.....#.#.......#...#.#.#.#.....#.#.#...#.#.#...#.#...#.....#...#
#####.#L###.###.#.#####.###############.#.#.#####.#.#####.#.###.#####.###.###.###
#.....#...#...#.#.#............c#.......#.#y#.....#.....#.#...#.....#.#.#.....#.#
#.#######.###.#.#.###########.#.#.#####.#.#.#.#####.###.#.###.#####.#.#.#######.#
#.........#...#...............#...#.....#...#...N...#.....#..t....#.............#
#################################################################################"""

EXAMPLE81="""########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################"""

EXAMPLE132="""########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################"""

EXAMPLE136="""#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################"""

EMPTY = '.'
WALL = '#'
PLAYER = '@'
LETTERS = 'abcdefghijklmnopqrstuvwxyz'

DOORS = list(map(lambda x: int(pow(2, x)), range(26)))

def around(pos):
    (x, y) = pos
    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]

class Board:
    def __init__(self, lines):
        self.board = list(map(lambda line: list(line.strip()), lines))
        self.best = self.skipped = self.found = 0
        self.all_keys = 0
        self.paths = self.key_to_key_paths()
        self.cache = {}

    def copy(self, new_board):
        b = Board([])
        assert self.board != new_board
        b.board = new_board
        return b

    def key_locations(self):
        locs = {}
        for y in range(len(self.board)):
            for x in range(len(self.board[y])):
                c = self.board[y][x]
                if c >= 'a' and c <= 'z' or c == PLAYER:
                    locs[self.door_code(c)] = (x, y)
                    self.all_keys += self.door_code(c)
        return locs

    def key_to_key_paths(self):
        # key = otherkey = (distance, doors).
        paths = {}
        key_locations = self.key_locations()

        for key in key_locations.keys():
            paths[key] = self.paths_for_key(key, key_locations[key])
        paths[0] = self.paths_for_key(0, self.player_position())
        # for k, v in paths.items():
        #     print('%s: ' % (k))
        #     for to, details in v.items():
        #         print('\t%s: %s' % (to, details))
        return paths

    def door_code(self, door):
        if door == PLAYER:
            return 0
        base = ord('a') if door >= 'a' and door <= 'z' else ord('A')
        zeroidx = ord(door) - base
        return DOORS[zeroidx]

    def paths_for_key(self, key, location):
        visited = [[False] * len(self.board[0]) for y in range(0, len(self.board))]
        keys = {}
        investigate = [(location, 0, 0)]
        for next in around(investigate[0][0]):
            investigate.append((next, 1, 0))
        doors = []
        while True:
            while len(investigate):
                [pos, distance, required] = investigate[0]
                investigate = investigate[1:]
                (x, y) = pos
                if visited[y][x]:
                    continue
                visited[y][x] = True
                here = self.board[y][x]
                if here == EMPTY or here == PLAYER:
                    for next in around(pos):
                        investigate.append((next, distance + 1, required))
                elif here == WALL:
                    continue
                elif here >= 'a' and here <= 'z' and key == self.door_code(here):
                    continue
                else:
                    if here.upper() == here:
                        # Door.
                        doors.append((pos, distance, required | self.door_code(here)))
                    else:
                        # Key.
                        keys[self.door_code(here)] = (pos, distance, required)
                        for next in around(pos):
                            investigate.append((next, distance + 1, required))
            if len(doors):
                door = doors[0]
                investigate.append(door)
                # attvaround thd door with required
                doors = doors[1:]
                for next in around(door[0]):
                    investigate.append((next, door[1] + 1, door[2]))

            else:
                break
        return keys

    def player_position(self):
        return self.position_of(PLAYER)

    def position_of(self, tile):
        for y in range(0, len(self.board)):
            for x in range(0, len(self.board[y])):
                if self.board[y][x] == tile:
                    return (x, y)
        return None

    def apply_key(self, key, pos):
        (keyx, keyy) = pos
        assert self.board[keyy][keyx] == key
        applied = deepcopy(self.board)
        (px, py) = self.player_position()
        applied[py][px] = EMPTY
        applied[keyy][keyx] = PLAYER
        if self.position_of(key.upper()):
            (doorx, doory) = self.position_of(key.upper())
            applied[doory][doorx] = EMPTY

        return self.copy(applied)

    def minimum_all_keys_distance(self, at, have, distance):
        # if self.skipped % 10000 == 0:
        #     print(self.skipped, self.found)
        # if self.best and distance > self.best:
        #     self.skipped += 1
        #     return None

        key = (at, have)
        if key in self.cache:
           return distance + self.cache[key]

        if have == self.all_keys:
            if self.best > distance:
                self.found += 1
                self.best = distance

            return distance
        possibles = self.get_possible(at, have)
        ret = 100000000000
        for p in possibles:
            (new_key, key_distance) = p
            mind = self.minimum_all_keys_distance(new_key, have | new_key, key_distance)
            if mind and mind < ret:
                ret = mind
        assert ret != 100000000000
        self.cache[key] = ret
        return distance + ret

    def get_possible(self, at, have):
        possible = []
        for to, value in self.paths[at].items():
            [_, distance, required] = value
            need = to & have == 0
            if not need:
                continue
            if required & have != required:
                continue
            possible.append((to, distance))
        assert len(possible)
        return possible


def assert_board(expected, lines):
    b = Board(lines)
    actual = b.minimum_all_keys_distance(0, 0, 0)
    print(actual, expected)
    assert actual == expected

def test():
    assert_board(86, ['########################', '#f.D.E.e.C.b.A.@.a.B.c.#', '######################.#', '#d.....................#', '########################'])
    assert_board(81, EXAMPLE81.split('\n'))
    assert_board(8, ['#########', '#b.A.@.a#', '#########'])
    assert_board(132, EXAMPLE132.split('\n'))
    assert_board(136, EXAMPLE136.split('\n'))


def part1():
    lines = INPUT.split('\n')
    b = Board(lines)
    print('AKP for sample:',b.minimum_all_keys_distance(0, 0, 0)) # AKP for sample: 4676

test()
# part1()

