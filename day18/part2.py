from copy import deepcopy
from collections import defaultdict

INPUT="""#################################################################################
#...#........e......#n........#z........#.......#.................#.........#...#
#.#.#Y#######.#####.#.#####.###.#######.#.#######.#############.#.#.#####.#.#.#.#
#.#.#.#.......#.....#.#...#.#...T.#.....#.............#...#.....#.#.#...#.#...#.#
#.###.#.#######.#####.#.###.#.#####.###Z#.###########.#.#.#.#####.###.#.#.#####.#
#.....#...#...#.......#.....#.#.#...#...#...#.....#...#.#...#.....#...#.#.#.....#
#.#######.#.#.#####.#########.#.#.###.#####C#S###.#####.#####.#####.###.#.#.###.#
#.#.X.#...#.#.......#...........#.#.#...#...#.#...#.....#...#.#.....#...#.#.#...#
#.#.#.#.#####.#######.###########.#.###.#.###.#.###.#####.#.#.#.#####.#####.#.###
#...#.#.#...#.....#...#....w#.A.#.#...#a#.#.#.#.#.......#.#...#...#...#...#.#.#.#
#####.#.#.#.#####.#F###.###.#.#.#.#.#.#.#.#.#.#.#######.###.#####.#.###.#.#.#.#.#
#.....#.#.#.#.....#...#...#.#.#...#.#...#..l#.#.......#...#.......#.#...#...#.#.#
#.#####.#.#.#####.###.###.#.#.#########.#####.#######.#.#.#########.#.#######.#.#
#.#...#...#.....#.#...#.W.#...#.......#.#.....#.....#.#.#.......#.....#.....#...#
#.###.#########.###.###.#####.#.#####.###.#########.#.#.#######.#.#####.###.###.#
#.......#.....#.....#.#.#.....#...G.#b..#...#...#...#.#...#...#.#.#...#...#.#...#
#######U#.###.#######.#.#######.#######.###.#.#Q#.###.#####.#.#.###.#.###.#.###.#
#.....#.#.#...#.......#.....#...#.B.....#.#...#.#...#.....#.#.#.....#.....#...#.#
#.#####.###.#.#.#####.#####.#.###.#######.#####.###.#####.#.#.#.#############.###
#.#.....#o..#...#.#.......#g..#..j#.....#.#.....#...#.....#.#.#...#.........#..k#
#.#.#####.#######.#.#####.#####.###.###.#.#.#####.#.#.#####.#.###.#.###.###.###.#
#.#.....#.#.#.....#.#.J.#.#.....#.....#.#.#.#.....#.#.......#.#.#.#...#...#.#.#.#
#.#####.#.#.#.###.#.###.###.#####.###.#.#.#.#.#####.###########.#.#######.#.#.#.#
#.....#...#.#...#.#...#.....#.....#.#.#.#.#.#...#...#...#.......#.#...#...#i#.#.#
#.###.#####.###.#.###.#######.#####.#.#.#.#.###.#.###.#.#.#####.#.#.#.#.###.#.#.#
#.#...#.....#...#.....#.....#.......#.#.#.#...#.#...#.#.......#.#.#.#..v#...#.#.#
#.#.###.#.#.#.#########.###.#####.###.#.#.###.#.###.#.#######.#.#.#.#####.###.#.#
#.#.#...#.#.#.#.......#.#.....#...#...#.#...#.#.#...#...#...#.#.....#...#.....#.#
#.###.###.###.#.#####.#.#.#####.###.###.#.###.#.#.#######.#.#########.#######.#.#
#.#...#...#...#.....#...#...#.....#.#...#h#...#.#.......#.#...#.....#...#.....#.#
#I#.###.###.#######.#######.#.#####.#.###.#.###.#######.#.###.#.###.###.#.#####.#
#.#...#.....#.....#.#...#...#.#.....#...#.#.....#.......#...#...#.#...#.#.#...#.#
#.###.#######.###.#.#.#.#.###.#.#######.#.#######.#########.#####.###.#.#.#.#.#.#
#...#.#.......#.#.#.#.#.#.....#.#...#...#...#...#.#.........#.......#.#...#.#...#
#.#.#.#######.#.#.###.#.#####.#.#.#.#.###.#.###.#.#####.#####.#####.#.#.###.###.#
#.#.#...#.....#.#.....#.#...#.#.#.#.#...#.#.#...#.#...#.#.....#...#.#.#...#.#.#.#
#.#####.#.#####.#######.#.#.###.###.###.#.#.#.#.#.#.#.#.#.#####.#.###.#####.#.#.#
#.......#.....#...#.....#.#.#...#.....#.#.#...#.#...#...#...H...#...#.......#...#
#.###########.#.###.#####.#.#.###.#####.#.###############.#########.#########.###
#.............#...........#...#...................................#...R........d#
#######################################.@.#######################################
#...#.......D.#.............#.......#.....#...................#...#.....#.......#
#.###.#####.###.#########.#.###.#.###.#.#.#.###########.#####.#.#.#.###.#.#####.#
#...#.#...#...........#.#.#...#.#.....#.#.#.......#...#.....#...#...#.....#...#.#
#K#.#.###.###########.#.#.###.#######.#.#.#.#####.#.#.#####.#.#######.#####.#.#.#
#.#.#.#.....#...#.....#.#.#...#.....#.#.#...#...#.#.#.......#.#...#.#.#...#.#...#
#.#.#.#.#####.#.###.###.#.###.#.###.###.#.###.#.###.#########.#.#.#.#.#.#.#.#####
#.#.....#.....#m..#.....#...#.#...#.....#.#...#.....#.......#.#.#.#...#.#.#.....#
#.#######.#######.###.#####.#.###.#####.###.#######.#######.#.#.#.#####.#.#####.#
#.#...#...#.......#...#...#.#.#...#...#.#...#.......#.....#...#.#.#.....#.#.#...#
#.###P#.###.###########.#.#.#.#.###.###.#.#########.#.###.#.###.#.#.#####.#.#.###
#.....#.#...#.....#.....#...#r..#...#...#...#.....#.#.#.#.#.#...#.#.#...#.#.#...#
#######.#.#####.#.#.#############.###.###.#.#.###.#.#.#.#.###.###.#.#.###.#.###.#
#.....#.#...#...#...#.....#.......#...#.#.#.#...#.#.#.#.#...#...#.#.#...#.#...#.#
#.###.#.###.#.#########.#.#.#.#####.###.#.#.#.###.#.#.#.###.###.#.#.###.#.###.#.#
#.#.#...#.#...#.........#.#.#.....#.....#.#...#...#.#.#...#...#.#.#...#.#...#.#.#
#.#.#####.#######.#########.#####.#####.#######.#.###.#.#####.#.#.###.#.###.#.#.#
#.#.....#.........#.....#...#...#.....#.#.......#.#...#.#...#.#.#...#.....#.#..p#
#.###.###.#####.###.###.#.###.#.#####.#.#.#######.#.###.#.#.#.#.###.###.###.#.###
#...#.#...#...#.......#.#...#.#.....#.#.#...#.....#.#.....#.#...#.....#.#...#...#
###.#.#.###.#.#########.###.#.#######.#.###.#######.#.#####.#####.#####.#.#####.#
#...#.#...#.#.#.......#...#.#.......#...#...#...#...#.#.#...#x..#.......#.#.....#
#.###.###.###.#.#######.#.#.#######.#####.###.#.#.###.#.#.#####.#.#####.#.#.#####
#.#.......#...#.#.......#.#.#.......#...#.....#...#.#.#.#.#...#.#.#...#.#.#.....#
#.#.#######.###.#.#######.#.#.#####.###.###########.#.#.#.#.#.#.###.#.###O#####.#
#.#.....#...#...#.#.......#...#...#...#.#...........#.#.#...#.#.....#..u..#...#.#
#.#####.#.#.#.#####.#####.#######.###.#.#.#########.#.#.#####.#############.###.#
#.#...#...#.#...#...#...#.........#...#.#...#...E.#.#...#.#.....#.......#.....M.#
#.#.#.#.#######.#.#####.###.#######.###.###.#.###.#.###.#.#.###.#.###.#.#.#######
#...#.#.#.....#.#.....#.....#.....#.#...#.#.#...#.#...#.#.#...#.#.#.#.#.#.#.....#
#.###.###.#.###.###.#.#####.#.###.#.###.#.#.#.#.#.#.###.#.###.#.#.#.#.###.#.###.#
#...#.#...#...#...#.#.....#.#...#.#.#...#.#.#.#.#.#...#.#...#q#.#...#...#.#.#...#
###.#.#.#####.###.#V#####.#.###.#.#.#.###.#.#.#.#.###.#.#.#.#.#.###.###.#.###.#.#
#...#.#.#...#.....#...#.#.#...#.#.#.#...#...#.#.#.#f#.#.#.#.#.#..s#.#.#.#.....#.#
#.###.#.#.#.#########.#.#.#####.#.#.#.#.#.#####.#.#.#.#.#.#.#.###.#.#.#.#######.#
#...#.#.#.#.....#.....#.#.......#...#.#.#.#.....#.#.#...#.#.#...#.#...#.....#...#
#####.#L###.###.#.#####.###############.#.#.#####.#.#####.#.###.#####.###.###.###
#.....#...#...#.#.#............c#.......#.#y#.....#.....#.#...#.....#.#.#.....#.#
#.#######.###.#.#.###########.#.#.#####.#.#.#.#####.###.#.###.#####.#.#.#######.#
#.........#...#...............#...#.....#...#...N...#.....#..t....#.............#
#################################################################################"""

EXAMPLE81="""########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################"""

EXAMPLE132="""########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################"""

EXAMPLE136="""#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################"""

EMPTY = '.'
WALL = '#'
PLAYER = '@'
LETTERS = 'abcdefghijklmnopqrstuvwxyz'

DOORS = list(map(lambda x: int(pow(2, x)), range(26)))

def around(pos):
    (x, y) = pos
    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]

class Board:
    def __init__(self, lines):
        self.board = list(map(lambda line: list(line.strip()), lines))
        self.best = self.skipped = self.found = 0
        self.all_keys = 0

        self.robot_paths = []
        for y in range(len(self.board)):
            for x in range(len(self.board[y])):
                if self.board[y][x] == PLAYER:
                    self.robot_paths.append(self.paths_for_player((x, y)))
        
        for r in self.robot_paths:
            for key in r.keys():
                self.all_keys |= key

        self.cache = {}

    def paths_for_player(self, location):
        paths = { 0: self.paths_for_location(location) }

        paths_from_player = paths[0]
        for key, value in paths_from_player.items():
            paths[key] = self.paths_for_location(value[0])
        return paths

    def paths_for_location(self, location):
        visited = [[False] * len(self.board[0]) for y in range(0, len(self.board))]

        # other key -> [(other_key_location, required to get between, distance between)]
        paths = {}
        need = 0
        distance = 0
        explore = [((location), need, distance)]
        for a in around(location):
            explore.append((a, 0, 1))
        start_square = self.board[location[1]][location[0]]

        doors = []
        while True:
            while len(explore):
                (pos, need, distance) = explore[0]
                explore = explore[1:]

                (x, y) = pos
                if visited[y][x]:
                    continue
                visited[y][x] = True

                here = self.board[y][x]
                if here >= 'A' and here <= 'Z':
                    doors.append((pos, need | self.door_code(here), distance))
                elif here == WALL:
                    continue
                elif here == EMPTY:
                    for a in around(pos):
                        explore.append((a, need, distance + 1))
                else:
                    assert (here >= 'a' and here <= 'z') or here == '@'
                    if here != start_square:
                        paths[self.door_code(here)] = (pos, need, distance)
                    for a in around(pos):
                        explore.append((a, need, distance + 1))

            if len(doors):
                (door_pos, door_need, door_distance) = doors[0]
                doors = doors[1:]
                for a in around(door_pos):
                    explore.append((a, door_need, door_distance + 1))
            else:
                break

        return paths

    def door_code(self, door):
        if door == PLAYER:
            return 0
        base = ord('a') if door >= 'a' and door <= 'z' else ord('A')
        zeroidx = ord(door) - base
        return DOORS[zeroidx]

    def minimum_all_keys_distance(self, at, have, distance):
        key = (at, have)
        if key in self.cache:
           return distance + self.cache[key]

        if have == self.all_keys:
            if self.best > distance:
                self.found += 1
                self.best = distance

            return distance
        possibles = self.get_possible(at, have)
        ret = 100000000000
        for p in possibles:
            (new_keys, key_distance) = p
            new_have = have
            for k in new_keys:
                new_have |= k
            mind = self.minimum_all_keys_distance(new_keys, new_have, key_distance)
            if mind and mind < ret:
                ret = mind
        assert ret != 100000000000
        self.cache[key] = ret
        return distance + ret

    def get_possible(self, at, have):
        possible = []
        for robot_idx in [0,1,2,3]:
            all = list(at)
            robot_paths_from_current = self.robot_paths[robot_idx][all[robot_idx]]
            for to, value in robot_paths_from_current.items():
                [_, required, distance] = value
                need = to & have == 0
                if not need:
                    continue
                if required & have != required:
                    continue
                all[robot_idx] = to
                possible.append((tuple(all), distance))
        return possible


def assert_board(expected, lines):
    b = Board(lines)
    actual = b.minimum_all_keys_distance((0,0,0,0), 0, 0)
    print(actual, expected)
    assert actual == expected
    print(f'{actual} == {expected}')

PART2_8 = """#######
#a.#Cd#
##@#@##
#######
##@#@##
#cB#Ab#
#######"""

EXAMPLE_P2_24 = """###############
#d.ABC.#.....a#
######@#@######
###############
######@#@######
#b.....#.....c#
###############"""

EXAMPLE_P2_32 = """#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############"""

EXAMPLE_P2_72 = """#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############"""

def test2():
    assert_board(8, PART2_8.split('\n'))
    assert_board(24, EXAMPLE_P2_24.split('\n'))
    assert_board(32, EXAMPLE_P2_32.split('\n'))
    assert_board(72, EXAMPLE_P2_72.split('\n'))


test2()
print('TESTS PASS!')

def part2_board():
    lines = INPUT.split('\n')
    maze = list(map(lambda l: list(l), lines))
    for y in range(len(maze)):
        for x in range(len(maze[y])):
            if maze[y][x] == '@':
                change = ['@#@', '###', '@#@']
                for dy in [-1, 0, 1]:
                    for dx in [-1, 0, 1]:
                        maze[y + dy][x + dx] = change[1 + dy][1 + dx]

                return list(map(lambda l: ''.join(l), maze))
    assert False
    return maze

def part2():
    maze = part2_board()
    print('\n'.join(maze))
    b = Board(maze)
    print(b.minimum_all_keys_distance((0,0,0,0), 0, 0))

part2() # 2066