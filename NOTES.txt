      -------Part 1--------   -------Part 2--------
Day       Time  Rank  Score       Time  Rank  Score
  9   00:09:36  2003      0   00:12:57   870      0
  8   00:05:52   688      0   00:17:22  1233      0
  7   00:13:40   413      0   00:30:12  1014      0
  6   00:05:50  1530      0   00:10:01  1115      0
  5   00:10:34  1350      0   00:15:01  1297      0
  4   00:13:37  2450      0   00:34:51  1769      0
  3   00:07:53  1610      0   00:12:58  1573      0
  2   00:04:04   415      0   00:06:59   435      0
  1   00:08:12  1254      0   00:11:10  1433      0

Day 1.
* Site went down, couldn't get input for about 7 mins.
* Did all my work in the template instead of 1.py. Otherwise the template worked pretty well.
* Forgot to parse the items as ints!
* Didn't switch logic over to the part2() function, so it was failing the assert.
* Didn't do a day1 branch.

Day 2:
* Pretty straightforward.
* Separate windows and files worked smoothly.
* Parsing was more complicated than necessary.
* ^ for XOR :)

Day 3:
* Forgot that the pattern repeated across.
* Got stuck on wrong sample - copied the ones with X and Os filled in for trees and misses, not the top one.
* Over complicated loop instead of just multiplying the output of all the funcs.

Day 4:
* Copy / Paste error on sample led me down a bunch of random paths, code was basically working to start.
* Should have made valid_port() a separate function from the start since it was easier to return on invalids.
* Should use if a <= var <= b more.
* Splitting on "\n\n" was a little clearner, but still needed to turn \n in spanned ports into whitespace.
* Looking back I'm surprised how long I took on Part 2 - it went way faster when I refactored into a func.
* Another day where simple regex would have gone a long way.

Day 5:
* Ahhh... I'm in such a rush to read and implement it literally.
* I missed that you were given 8 bits, and then 3 bits and could just convert like that.
* Nevertheless, it was implemented pretty smoothly.
* The website hung slightly on loading and getting input and submitting part1.
* Too much printing caused a slowdown, made it hard to understand what my return value was. Will fix.
* I found Part 2 somewhat hard to understand at first. I think I'm trying to skip over the prose and skip things.

Day 6:
* Group parsing using read().split("\n\n") worked well - will add to template.
* Use a wider debug window, and make sure parsing happens properly if the sample fails.
* Need to read instructions more carefully!

Day 7:
* Parsing was OK... sorta.. wasted some time here. I should build a parser verifier!!!
* Asserts were very helpful - kept me from submitting junk.
* I should have used better variable names on the recursion.
* Part 2 - I TOTALLY misread the question. I thought it was about how many bags could lead to a shiny bag and how many bags would they be holding.

Day 8:
* Emulator Question!
* Didn't copy the input in, which lead to an empty file which was a slighlty confusing error.
* Wasted time on part 2 because I just did a .copy() but I needed a copy.deepcopy() since I had sub arrays.

Day 9:
I was seriously tempted to not do the sample one this time. It made it a bit harder, since I needed to use a different window length. I should have at least done it with a hacky CONSTANT.
I didn't do the sample on part 2 since it seemed so hard to screw up. And this helped me drop 1100 spots... seriously part 2 was pretty easy.
* I forgot to insert the real.txt again. Will add an assert. Or maybe download directly!

Day 10:
* Forgot to adjust template to Day 10 (caught quickly). Int parsing worked well.
* Read question pretty well, got jist relatively quickly.
* Part 2... oh man. Had the idea to sum relatively quickly, but couldn't implement.
* Unmemoized version took down my Ubuntu container with stack overflow presumably. Restared ok quickly.
* Missed that you could start not just from 0 but from 2,3's. That's why sample1 passed but sample2 failed.
* Printing the memoization helped me realize this.
* Forgot about solutions auto getting copyied to clipboard.

Every Day Plan:
* Get a dayX branch X.part1.py, X.part2.py X.txt, X.sample files ready in the other panes for easy pasting and reference.
* Grab input first thing next time in case.
